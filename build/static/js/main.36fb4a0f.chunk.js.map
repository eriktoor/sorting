{"version":3,"sources":["logo.svg","sortingAlgorithms/mergeSort.js","sortingAlgorithms/quickSort.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","QuickSort","arr","index","left","right","len","partition","pivot","temp","PrettoSlider","withStyles","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","track","borderRadius","rail","Slider","Header","state","currentPage","isOpen","setIsOpen","sliderValue","toggle","bind","sliderListener","this","resetArray","document","getElementById","style","parseInt","random","setState","resetColors","event","prevState","props","console","log","ANIMATION_SPEED_MS","arrayBars","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","textContent","setTimeout","newHeight","completeSort","idx","idxOne","arrayLength","heightOne","heightTwo","idxTwo","Navbar","className","light","expand","NavbarBrand","href","onClick","display","NavbarToggler","Collapse","navbar","Nav","NavItem","classNames","NavLink","onChange","e","val","margin","valueLabelDisplay","aria-label","defaultValue","id","cursor","mergeSort","bubbleSort","UncontrolledDropdown","float","nav","inNavbar","DropdownToggle","caret","DropdownMenu","DropdownItem","divider","map","value","textShadow","window","innerWidth","key","React","Component","App","someFunction","buttonListenerAbout","classList","replace","alert","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.36fb4a0f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function bubbleSort(items, animations) {\r\n    var length = items.length;\r\n    //Number of passes\r\n    for (var i = 0; i < length; i++) { \r\n        //Notice that j < (length - i)\r\n        for (var j = 0; j < (length - i - 1); j++) { \r\n            //Compare the adjacent positions\r\n            if(items[j] > items[j+1]) {\r\n                //Swap the numbers\r\n\r\n                animations.push([items[j], items[j + 1]])\r\n\r\n                var tmp = items[j];  //Temporary variable to hold the current number\r\n                items[j] = items[j+1]; //Replace current number with adjacent number\r\n                items[j+1] = tmp; //Replace adjacent number with current number\r\n            }\r\n        }        \r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport function getBubbleSortAnimations(array) {\r\n  const animations = []\r\n  var arrayLength = array.length\r\n  while (arrayLength > 0) {\r\n\r\n      for (let i = 0; i < arrayLength - 1; i++){\r\n\r\n          let heightOne = array[i]\r\n          let heightTwo = array[i+1]\r\n\r\n          animations.push([i, i + 1]) // PUSH THE TWO THINGS WE ARE LOOKING AT AND TURN THEM RED -- ALWAYS HAPPENS\r\n\r\n\r\n          if (heightOne > heightTwo){\r\n\r\n              animations.push([i, heightTwo]) // CHANGE FIRST HEIGHT \r\n              animations.push([i+1, heightOne]) // CHANGE SECOND HEIGHT\r\n\r\n              array[i] = array[i+1]\r\n              array[i+1] = heightOne \r\n          } else {\r\n              animations.push([i, heightOne]) // KEEP THEM SAME\r\n              animations.push([i + 1, heightTwo]) // KEEP THEM SAME \r\n\r\n          }\r\n\r\n\r\n          if (i === arrayLength -2) {\r\n              animations.push([arrayLength-1, arrayLength-1])\r\n          } else { \r\n              animations.push([0, 0])\r\n          }\r\n\r\n      }\r\n\r\n\r\n      arrayLength --; \r\n\r\n  }\r\n}\r\n\r\n\r\n\r\n// Find a \"pivot\" element in the array to compare all other\r\n// elements against and then shift elements before or after\r\n// pivot depending on their values\r\nfunction QuickSort(animations, arr, left = 0, right = arr.length - 1) {\r\n  let len = arr.length,\r\n      index\r\n\r\n  if(len > 1) {\r\n\r\n    index = partition(animations, arr, left, right)\r\n\r\n    animations.push([index,-1]) // push index at 0, -1 means pivot\r\n\r\n    if(left < index - 1) {\r\n      QuickSort(animations, arr, left, index - 1, animations)\r\n    } \r\n\r\n    if(index < right) {\r\n      QuickSort(animations, arr, index, right)\r\n    }\r\n\r\n  }\r\n\r\n  return arr\r\n\r\n}\r\n\r\nfunction partition(animations, arr, left, right) {\r\n  let middle = Math.floor((right + left) / 2),\r\n      pivot = arr[middle],\r\n      i = left,                 // Start pointer at the first item in the array\r\n      j = right                 // Start pointer at the last item in the array\r\n\r\n  while(i <= j) {\r\n\r\n    // Move left pointer to the right until the value at the\r\n    // left is greater than the pivot value\r\n\r\n\r\n    while(arr[i] < pivot) {\r\n\r\n      animations.push([i,-2]) // -2 means we are comparing if the values on the left are less than the pivot\r\n\r\n      i++\r\n\r\n    }\r\n\r\n    // Move right pointer to the left until the value at the\r\n    // right is less than the pivot value\r\n    while(arr[j] > pivot) {\r\n\r\n      animations.push([j,-3]) // -3 means we are comparing if the values on the right are greater than the pivot\r\n\r\n\r\n      j--\r\n    }\r\n\r\n    // If the left pointer is less than or equal to the \r\n    // right pointer, then swap values\r\n    if(i <= j) {\r\n\r\n      animations.push([i,-4]) // -4 means we are comparing i and j \r\n      animations.push([j,-4]) // --4\r\n\r\n      let temp = arr[i]\r\n      arr[i] =  arr[j]  // ES6 destructuring swap\r\n      arr[j] = temp\r\n\r\n\r\n      animations.push([i,j]) // i, j means we are swapping i and j \r\n\r\n      i++\r\n      j--\r\n    }\r\n  }\r\n\r\n  return i\r\n\r\n}\r\n\r\nexport function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  if (array.length <= 1) return array;\r\n  QuickSort(animations, array);\r\n  return animations;\r\n}\r\n\r\n\r\n","\r\nexport function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    QuickSort(animations, array);\r\n    return animations;\r\n  }\r\n  \r\n  // Find a \"pivot\" element in the array to compare all other\r\n  // elements against and then shift elements before or after\r\n  // pivot depending on their values\r\n  function QuickSort(animations, arr, left = 0, right = arr.length - 1) {\r\n    let len = arr.length,\r\n        index\r\n  \r\n    if(len > 1) {\r\n  \r\n      index = partition(animations, arr, left, right)\r\n  \r\n      animations.push([index,-1]) // push index at 0, -1 means pivot\r\n  \r\n      if(left < index - 1) {\r\n        QuickSort(animations, arr, left, index - 1, animations)\r\n      } \r\n  \r\n      if(index < right) {\r\n        QuickSort(animations, arr, index, right)\r\n      }\r\n  \r\n    }\r\n  \r\n    return arr\r\n  \r\n  }\r\n  \r\n  function partition(animations, arr, left, right) {\r\n    let middle = Math.floor((right + left) / 2),\r\n        pivot = arr[middle],\r\n        i = left,                 // Start pointer at the first item in the array\r\n        j = right                 // Start pointer at the last item in the array\r\n  \r\n    while(i <= j) {\r\n  \r\n      // Move left pointer to the right until the value at the\r\n      // left is greater than the pivot value\r\n  \r\n  \r\n      while(arr[i] < pivot) {\r\n  \r\n        animations.push([i,-2]) // -2 means we are comparing if the values on the left are less than the pivot\r\n  \r\n        i++\r\n  \r\n      }\r\n  \r\n      // Move right pointer to the left until the value at the\r\n      // right is less than the pivot value\r\n      while(arr[j] > pivot) {\r\n  \r\n        animations.push([j,-3]) // -3 means we are comparing if the values on the right are greater than the pivot\r\n  \r\n  \r\n        j--\r\n      }\r\n  \r\n      // If the left pointer is less than or equal to the \r\n      // right pointer, then swap values\r\n      if(i <= j) {\r\n  \r\n        animations.push([i,-4]) // -4 means we are comparing i and j \r\n        animations.push([j,-4]) // --4\r\n  \r\n        let temp = arr[i]\r\n        arr[i] =  arr[j]  // ES6 destructuring swap\r\n        arr[j] = temp\r\n  \r\n  \r\n        animations.push([i,j]) // i, j means we are swapping i and j \r\n  \r\n        i++\r\n        j--\r\n      }\r\n    }\r\n  \r\n    return i\r\n  \r\n  }\r\n  \r\n  \r\n  ","import React, { useState } from 'react';\r\nimport \"./Header.css\";\r\n\r\nimport \"../Bootstrap.css\";\r\nimport Bar from \"./Bar/Bar.js\"\r\n\r\nimport {getMergeSortAnimations} from '../../sortingAlgorithms/mergeSort.js';\r\nimport {getQuickSortAnimations} from '../../sortingAlgorithms/quickSort.js';\r\n\r\n\r\n\r\nimport {\r\n    Collapse,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n    Nav,\r\n    NavItem,\r\n    NavLink,\r\n    UncontrolledDropdown,\r\n    DropdownToggle,\r\n    DropdownMenu,\r\n    DropdownItem,\r\n    NavbarText\r\n  } from 'reactstrap';\r\n\r\n  import { withStyles, makeStyles } from '@material-ui/core/styles';\r\n  import Slider from '@material-ui/core/Slider';\r\n  import Typography from '@material-ui/core/Typography';\r\n  import Tooltip from '@material-ui/core/Tooltip';\r\n\r\n  // Change this value for the speed of the animations.\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 310;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = 'turquoise';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = 'red';\r\n\r\n\r\n\r\n\r\n\r\n  const PrettoSlider = withStyles({\r\n    root: {\r\n      color: '#52af77',\r\n      height: 8,\r\n    },\r\n    thumb: {\r\n      height: 24,\r\n      width: 24,\r\n      backgroundColor: '#fff',\r\n      border: '2px solid currentColor',\r\n      marginTop: -8,\r\n      marginLeft: -12,\r\n      '&:focus, &:hover, &$active': {\r\n        boxShadow: 'inherit',\r\n      },\r\n    },\r\n    active: {},\r\n    valueLabel: {\r\n      left: 'calc(-50% + 4px)',\r\n    },\r\n    track: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n    rail: {\r\n      height: 8,\r\n      borderRadius: 4,\r\n    },\r\n  })(Slider);\r\n\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const toggle = () => setIsOpen(!isOpen);\r\n\r\n\r\n\r\n\r\n  class Header extends React.Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            currentPage: <Header />,\r\n            isOpen: false,\r\n            setIsOpen: false, \r\n            sliderValue: 20,\r\n            array: [],\r\n        }\r\n    \r\n        this.toggle = this.toggle.bind(this)\r\n        this.sliderListener = this.sliderListener.bind(this)\r\n        \r\n    \r\n    \r\n      }\r\n\r\n      componentDidMount(){\r\n          this.resetArray();\r\n      }\r\n\r\n      resetColors(){\r\n        for (let i = 0; i < (this.state.array.length); i ++){\r\n            document.getElementById(i).style.backgroundColor = \"blue\"\r\n        }\r\n        // array-bar\r\n\r\n      }\r\n\r\n      resetArray(){\r\n          const array = []\r\n          for (let i = 0; i < this.state.sliderValue; i++){\r\n              array.push(parseInt(Math.random()*1000)+5);\r\n          }\r\n          this.setState({array}, \r\n            () => {this.resetColors()}\r\n            )\r\n      }\r\n\r\n\r\n\r\n\r\n      toggle(event){\r\n\r\n\r\n        this.setState((prevState, props) => {\r\n            // alert(prevState.isOpen)\r\n            return {setIsOpen: !prevState.isOpen,\r\n                    isOpen: !prevState.isOpen};\r\n          })\r\n\r\n        } \r\n\r\n        sliderListener(event){\r\n            //console.log(\"This is a useless method\") is it stil ? \r\n            this.resetArray()\r\n        }\r\n\r\n        barChanger(){\r\n            console.log(this.state.sliderValue)\r\n            // this.setState += <Bar name={\"Erik\"} date={\"20\"} video={\"s\"}  />\r\n            this.resetArray()\r\n        }\r\n\r\n\r\n\r\n        mergeSort(){\r\n\r\n            document.getElementById(\"mergeSort\").style.color = \"rgba(220, 20, 60)\"\r\n\r\n            const ANIMATION_SPEED_MS = 500 / this.state.sliderValue\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            for (let i = 0; i < animations.length; i++) {\r\n              const arrayBars = document.getElementsByClassName('array-bar');\r\n              const isColorChange = i % 3 !== 2;\r\n              if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barOneText = arrayBars[barOneIdx].textContent \r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const barTwoText = arrayBars[barTwoIdx].textContent\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                  barOneStyle.backgroundColor = color;\r\n                  barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n              } else {\r\n                setTimeout(() => {\r\n                  const [barOneIdx, newHeight] = animations[i];\r\n                  const barOneStyle = arrayBars[barOneIdx].style;\r\n                //   barOneStyle.textContent = newHeight; \r\n                  document.getElementsByClassName('array-bar')[barOneIdx].textContent = newHeight\r\n                  barOneStyle.height = `${newHeight}px`;\r\n                  if (i === animations.length - 1){\r\n                    this.completeSort()\r\n                  }\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n              }              \r\n            }\r\n        }\r\n\r\n        completeSort(){\r\n            document.getElementById(\"mergeSort\").style.color = \"rgba(255, 255, 255, .5)\"\r\n            document.getElementById(\"bubbleSort\").style.color = \"rgba(255, 255, 255, .5)\"\r\n            // document.getElementById(\"quickSort\").style.color = \"rgba(255, 255, 255, .5)\"\r\n            // document.getElementById(\"heapSort\").style.color = \"rgba(255, 255, 255, .5)\"\r\n        }     \r\n\r\n\r\n        \r\n\r\n        heapSort(){\r\n\r\n            document.getElementById(\"heapSort\").style.color = \"rgba(220, 20, 60)\"\r\n\r\n            const ANIMATION_SPEED_MS = 500 / this.state.sliderValue\r\n            const animations = getMergeSortAnimations(this.state.array);\r\n            for (let i = 0; i < animations.length; i++) {\r\n              const arrayBars = document.getElementsByClassName('array-bar');\r\n              const isColorChange = i % 3 !== 2;\r\n              if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n                setTimeout(() => {\r\n                  barOneStyle.backgroundColor = color;\r\n                  barTwoStyle.backgroundColor = color;\r\n                }, i * ANIMATION_SPEED_MS);\r\n              } else {\r\n                setTimeout(() => {\r\n                  const [barOneIdx, newHeight] = animations[i];\r\n                  const barOneStyle = arrayBars[barOneIdx].style;\r\n                  barOneStyle.height = `${newHeight}px`;\r\n                  if (i === animations.length - 1){\r\n                    this.completeSort()\r\n                  }\r\n                }, i * ANIMATION_SPEED_MS);\r\n\r\n              }              \r\n            }\r\n\r\n        }\r\n\r\n\r\n        quickSort(){\r\n\r\n          document.getElementById(\"quickSort\").style.color = \"rgba(220, 20, 60)\"\r\n\r\n          const ANIMATION_SPEED_MS = 500 / this.state.sliderValue\r\n          const animations = getQuickSortAnimations(this.state.array);\r\n          console.log(animations)\r\n          \r\n          for (let i = 0; i < animations.length; i++) {\r\n\r\n\r\n            const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n            if (animations[i][1] === -1) {  //update\r\n\r\n                setTimeout(() => {\r\n                    let idx = animations[i][0]\r\n                    arrayBars[idx].style.backgroundColor = \"purple\" //mark as pivot\r\n                }, i * ANIMATION_SPEED_MS)\r\n            } else if (animations[i][1] === -2 || animations[i][1] === -3){\r\n\r\n              setTimeout(()=>{\r\n                  let idxOne = animations[i][0]\r\n                  // console.log(idxOne, idxTwo)\r\n                  arrayBars[idxOne].style.backgroundColor = \"red\"\r\n\r\n                }, i * ANIMATION_SPEED_MS)\r\n          } else if (animations[i][1] === -5){\r\n\r\n                setTimeout(()=>{\r\n                    let idxOne = animations[i][0]\r\n                    // console.log(idxOne, idxTwo)\r\n                    arrayBars[idxOne].style.backgroundColor = \"blue\"\r\n\r\n                  }, i * ANIMATION_SPEED_MS)\r\n            } else if (animations[i][1] > 0){ \r\n\r\n                setTimeout(()=>{\r\n                    let idx = animations[i][1]\r\n\r\n                    let newHeight = parseInt(arrayBars[idx].textContent)\r\n\r\n                    arrayBars[idx].textContent = newHeight\r\n                    arrayBars[idx].style.height = newHeight +  \"px\"\r\n                    arrayBars[idx].style.backgroundColor = \"blue\"\r\n                }, i * ANIMATION_SPEED_MS)\r\n            } \r\n            \r\n            \r\n            if (i === animations.length -1){\r\n                setTimeout(()=>{\r\n                    arrayBars[0].style.backgroundColor = \"purple\"\r\n                    this.completeSort()\r\n\r\n                }, i * ANIMATION_SPEED_MS)\r\n            }\r\n\r\n\r\n        } \r\n      }\r\n\r\n\r\n        bubbleSort(){\r\n\r\n\r\n            // const other_animations = getBubbleSortAnimations(this.state.array)\r\n\r\n            // for (let i = 0; i < other_animations.length; i ++){\r\n            //     console.log(i)\r\n            // }\r\n            \r\n            document.getElementById(\"bubbleSort\").style.color = \"rgba(220, 20, 60)\"\r\n\r\n            const ANIMATION_SPEED_MS = 500 / this.state.sliderValue\r\n\r\n            const array = this.state.array \r\n            const animations = []\r\n\r\n            var arrayLength = array.length\r\n            while (arrayLength > 0) {\r\n\r\n                for (let i = 0; i < arrayLength - 1; i++){\r\n\r\n                    let heightOne = array[i]\r\n                    let heightTwo = array[i+1]\r\n\r\n                    animations.push([i, i + 1]) // PUSH THE TWO THINGS WE ARE LOOKING AT AND TURN THEM RED -- ALWAYS HAPPENS\r\n\r\n\r\n                    if (heightOne > heightTwo){\r\n\r\n                        animations.push([i, heightTwo]) // CHANGE FIRST HEIGHT \r\n                        animations.push([i+1, heightOne]) // CHANGE SECOND HEIGHT\r\n    \r\n                        array[i] = array[i+1]\r\n                        array[i+1] = heightOne \r\n                    } else {\r\n                        animations.push([i, heightOne]) // KEEP THEM SAME\r\n                        animations.push([i + 1, heightTwo]) // KEEP THEM SAME \r\n\r\n                    }\r\n\r\n\r\n                    if (i === arrayLength -2) {\r\n                        animations.push([arrayLength-1, arrayLength-1])\r\n                    } else { \r\n                        animations.push([0, 0])\r\n                    }\r\n    \r\n                }\r\n\r\n\r\n                arrayLength --; \r\n\r\n            }\r\n\r\n\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n\r\n\r\n                const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n                if (i % 4 === 3 && animations[i][1] !== 0) { \r\n\r\n                    setTimeout(() => {\r\n                        let idx = animations[i][1]\r\n                        arrayBars[idx].style.backgroundColor = \"purple\" //mark as complete\r\n                    }, i * ANIMATION_SPEED_MS)\r\n                } else if (i % 4 === 0){\r\n\r\n                    setTimeout(()=>{\r\n                        let idxOne = animations[i][0]\r\n                        let idxTwo = animations[i][1]\r\n                        // console.log(idxOne, idxTwo)\r\n                        arrayBars[idxOne].style.backgroundColor = \"red\"\r\n                        arrayBars[idxTwo].style.backgroundColor = \"red\"\r\n                    }, i * ANIMATION_SPEED_MS)\r\n                } else if (i % 4 === 1){ \r\n\r\n                    setTimeout(()=>{\r\n                        let idx = animations[i][0]\r\n\r\n                        arrayBars[idx].textContent = animations[i][1] \r\n                        arrayBars[idx].style.height = animations[i][1] +  \"px\"\r\n                        arrayBars[idx].style.backgroundColor = \"blue\"\r\n                    }, i * ANIMATION_SPEED_MS)\r\n                } else if (i % 4 === 2){\r\n\r\n                    setTimeout(()=>{\r\n                        let idx = animations[i][0]\r\n\r\n                        arrayBars[idx].textContent = animations[i][1] \r\n                        arrayBars[idx].style.height = animations[i][1] +  \"px\"\r\n                        arrayBars[idx].style.backgroundColor = \"blue\"\r\n                    }, i * ANIMATION_SPEED_MS)\r\n                }\r\n\r\n                if (i === animations.length -1){\r\n                    setTimeout(()=>{\r\n                        arrayBars[0].style.backgroundColor = \"purple\"\r\n                        this.completeSort()\r\n\r\n                    }, i * ANIMATION_SPEED_MS)\r\n                }\r\n\r\n\r\n            } \r\n\r\n\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n\r\n            \r\n\r\n\r\n\r\n            //     const isColorChange = i % 3 !== 2;\r\n            //     if (isColorChange) {\r\n            //       const [barOneIdx, barTwoIdx] = animations[i];\r\n            //       const barOneStyle = arrayBars[barOneIdx].style;\r\n            //       const barTwoStyle = arrayBars[barTwoIdx].style;\r\n            //       const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n            //       setTimeout(() => {\r\n            //         barOneStyle.backgroundColor = color;\r\n            //         barTwoStyle.backgroundColor = color;\r\n            //       }, i * ANIMATION_SPEED_MS);\r\n            //     } else {\r\n            //       setTimeout(() => {\r\n            //         const [barOneIdx, newHeight] = animations[i];\r\n            //         const barOneStyle = arrayBars[barOneIdx].style;\r\n            //         barOneStyle.height = `${newHeight}px`;\r\n            //         if (i === animations.length - 1){\r\n            //           this.completeSort()\r\n            //         }\r\n            //       }, i * ANIMATION_SPEED_MS);\r\n  \r\n            //     }              \r\n            //   }\r\n\r\n\r\n            \r\n        \r\n\r\n    render(){\r\n\r\n\r\n\r\n        return (\r\n\r\n\r\n\r\n        <div>\r\n\r\n            <div>\r\n                <Navbar style={{}} color=\"dark\" className=\"navbar-dark navbar-expand-sm\" light expand=\"md\">\r\n                <NavbarBrand href=\"\" onClick={this.resetArray}>Generate New Array</NavbarBrand>\r\n                <div style={{display: \"inline-block\", width: \"10%\"}}></div>\r\n\r\n                <NavbarToggler onClick={this.toggle} />\r\n                <Collapse isOpen={this.state.isOpen} navbar>\r\n                    <Nav className=\"mr-auto\" style={{}} navbar>\r\n                        <NavItem classNames=\"nav-item-padding\">\r\n                            <NavLink style={{width: \"15%\",}} href=\"/components/\"></NavLink>\r\n                        </NavItem>\r\n                        \r\n                        <NavItem classNames=\"nav-item-padding\">\r\n                            <NavLink style={{width: \"15%\",}} href=\"/components/\">Change Array Size</NavLink>\r\n                        </NavItem>\r\n                        \r\n                        {/* <Typography gutterBottom>pretto.fr</Typography> */}\r\n                        <PrettoSlider \r\n                        onChange={(e, val) => {\r\n                            this.resetArray()\r\n                            this.setState({sliderValue: val})\r\n                        }} \r\n                        // onDragStop={this.sliderListener}\r\n                        onClick={this.sliderListener} style={{margin: \"5%\",}} \r\n                        valueLabelDisplay=\"auto\" aria-label=\"pretto slider\" defaultValue={20} />            \r\n                        \r\n                        <NavItem classNames=\"nav-item-padding\">\r\n                            <NavLink id=\"mergeSort\" style={{cursor: \"pointer\"}} onClick={ () => this.mergeSort() }>Merge Sort</NavLink>\r\n                        </NavItem>\r\n                        {/* <NavItem classNames=\"nav-item-padding\">\r\n                            <NavLink id=\"quickSort\" style={{cursor: \"pointer\"}} onClick={ () => this.quickSort(this.state.array) }>Quick Sort</NavLink>\r\n                        </NavItem>\r\n                        <NavItem classNames=\"nav-item-padding\">\r\n                            <NavLink id=\"heapSort\" style={{cursor: \"pointer\"}} onClick={ () => this.heapSort() }>Heap Sort</NavLink>\r\n                        </NavItem> */}\r\n                        <NavItem classNames=\"nav-item-padding\">\r\n                            <NavLink id=\"bubbleSort\" style={{cursor: \"pointer\"}} onClick={ () => this.bubbleSort() }>Bubble Sort</NavLink>\r\n                        </NavItem>\r\n\r\n                        <UncontrolledDropdown style={{float: \"right\"}} nav inNavbar>\r\n                            <DropdownToggle nav caret>\r\n                            Options\r\n                            </DropdownToggle>\r\n\r\n                            <DropdownMenu right>\r\n                            <DropdownItem>\r\n                                <NavLink style={{color:\"black\"}} href=\"https://github.com/reactstrap/reactstrap\">Home</NavLink>\r\n                            </DropdownItem>\r\n                            <DropdownItem>\r\n                                <NavLink style={{color:\"black\"}} href=\"https://github.com/reactstrap/reactstrap\">Feedback</NavLink>\r\n                            </DropdownItem>\r\n                            <DropdownItem divider />\r\n                            <DropdownItem>\r\n                                <NavLink style={{color:\"black\"}} href=\"\" onClick={this.resetArray}>Reset</NavLink>\r\n                            </DropdownItem>\r\n                            </DropdownMenu>\r\n\r\n                        </UncontrolledDropdown>\r\n                    </Nav>\r\n                    {/* <NavbarText>Simple Text</NavbarText> */}\r\n                </Collapse>\r\n                </Navbar>\r\n            </div>\r\n\r\n            <div className=\"array-container\">\r\n            <>\r\n                {this.state.array.map((value, idx)=> (\r\n                    <div \r\n                        className=\"array-bar\" \r\n                        style={{ backgroundColor: \"blue\", color: \"white\", textShadow: \"2px 2px 4px #000000\", height: `${value}px`, width: `${ (window.innerWidth - 400 ) / this.state.sliderValue}px`, }} \r\n                        id={idx}\r\n                        key={idx} >{ (window.innerWidth * .9 ) / this.state.sliderValue > 35 ? value : \"'\"}\r\n                    </div>\r\n                \r\n                ))}\r\n            </>\r\n            </div>\r\n\r\n        </div>\r\n    \r\n        );\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport default Header; // Don’t forget to use export default!","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Header from \"./components/Header/Header.js\"\n\nclass App extends React.Component {\n\n  constructor() {\n    super()\n    this.state = {\n        currentPage: <Header />,\n    }\n    this.someFunction = this.someFunction.bind(this)\n\n    this.buttonListenerAbout = this.buttonListenerAbout.bind(this)\n\n\n  }\n\n  buttonListenerAbout(event){\n\n    document.getElementById(\"profile\").classList.replace(\"btn-success\", \"btn-primary\")\n    document.getElementById(\"recycle\").classList.replace(\"btn-success\", \"btn-primary\")\n    document.getElementById(\"verify\").classList.replace(\"btn-success\", \"btn-primary\")\n    document.getElementById(\"about\").classList.replace(\"btn-success\", \"btn-primary\")\n    document.getElementById(\"post\").classList.replace(\"btn-success\", \"btn-primary\")\n\n    document.getElementById(\"about\").classList.replace(\"btn-primary\", \"btn-success\")\n    // document.getElementById(\"recycle-page\").style.zIndex = this.state.count+1 \n\n    this.setState((prevState, props) => {\n        return {currentPage: <Header />};\n      })\n  }\n\n  someFunction(event){\n    console.log(event)\n    alert(event)\n    // document.getElementById(\"profile\").classList.replace(\"btn-success\", \"btn-primary\")\n    // document.getElementById(\"recycle\").classList.replace(\"btn-success\", \"btn-primary\")\n    // document.getElementById(\"verify\").classList.replace(\"btn-success\", \"btn-primary\")\n    // document.getElementById(\"about\").classList.replace(\"btn-success\", \"btn-primary\")\n    // document.getElementById(\"post\").classList.replace(\"btn-success\", \"btn-primary\")\n\n    // document.getElementById(\"about\").classList.replace(\"btn-primary\", \"btn-success\")\n    // document.getElementById(\"recycle-page\").style.zIndex = this.state.count+1 \n\n    this.setState((prevState, props) => {\n        return {currentPage: <Header />};\n      })\n  }\n\n\n\n  render(){\n\n    return (\n      <div className=\"App\">\n          <Header />\n      </div>\n    );\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}